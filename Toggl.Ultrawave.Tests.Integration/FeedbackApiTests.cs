using System;
using System.Collections.Generic;
using System.Reactive;
using System.Reactive.Linq;
using System.Threading.Tasks;
using FluentAssertions;
using Toggl.Multivac;
using Toggl.Ultrawave.Exceptions;
using Toggl.Ultrawave.Tests.Integration.BaseTests;
using Toggl.Ultrawave.Tests.Integration.Helper;
using Xunit;

namespace Toggl.Ultrawave.Tests.Integration
{
    public sealed class FeedbackApiTests
    {
        public sealed class TheSendMethod : AuthenticatedPostEndpointBaseTests<Unit>
        {
            private const string defaultMessage =
@"This feedback message was automatically generated by mobile integration tests.

If the message looks fine, please feel free to mark it as resolved. No other action is necessary.

If the message looks badly formatted, or otherwise broken, please let us know in #mobile-support.

Here are some test emojis: 🚀 👋 👍🏽
Here is what happens when users try to use **markdown** or <b>html</b>.
A link: https://toggl.com
Also check if the meta data included below is readable and formatted well.";

            private readonly Dictionary<string, string> defaultMetaData =
                new Dictionary<string, string>
                {
                    ["user agent"] = Configuration.UserAgent.ToString(),
                    ["device"] = "the cloud ☁️",
                };

            protected override IObservable<Unit> CallEndpointWith(ITogglApi togglApi)
                => togglApi.User.Get()
                    .SelectMany(user =>
                        togglApi.Feedback.Send(
                            email: user.Email,
                            message: defaultMessage,
                            data: defaultMetaData));

            [Fact]
            public async Task DoesAcceptFeedbackFromADifferentUserFromTheLoggedIn()
            {
                var (togglApi, user) = await SetupTestUser();
                var email = RandomEmail.GenerateInvalid();

                var message = defaultMessage +
                    "\n\nThis message was sent with an email address that is not associated with the user's account.";

                Func<Task> sendingFeedback = async () => await togglApi.Feedback.Send(
                    email: email,
                    message: message,
                    data: defaultMetaData
                    );

                sendingFeedback.Should().NotThrow();
            }
        }
    }
}
